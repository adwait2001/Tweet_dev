{"version":3,"sources":["logo.svg","lookup/component.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","send","ActionBtn","props","tweet","action","didperformAction","className","likes","actionDisplay","display","HandleBackendAction","console","log","type","onClick","event","preventDefault","tweetId","id","TweetAction","ParentTweet","parent","Tweet","HideActions","didRetweet","useState","actionTweet","setactionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","TweetsList","tweetsInit","settweetsInit","tweets","setTweets","tweetsDidSet","settweetsDidSet","useEffect","final","newTweets","concat","username","loadTweets","alert","HandleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","TweetComponent","setnewTweets","canTweet","tempnewTweets","DetailComponent","lookup","setlookup","settweet","HandleTweet","App","src","logo","alt","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.953f935f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData\r\n  if (data) {\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n  if (csrftoken){\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  xhr.onload = function() {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\"){\r\n        window.location.href = \"/login?showLoginRequired=true\"\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    callback({ \"message\": \"The request was an error\" }, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n\r\n}\r\n\r\n\r\n","\r\nimport React from 'react'\r\n\r\nimport { TweetAction } from './lookup'\r\n\r\nexport function ActionBtn(props) {\r\n    const { tweet, action ,didperformAction} = props\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n  \r\n    const HandleBackendAction = (response, status) => {\r\n      console.log(response, status)\r\n      if ((status == 200 || status==201 ) && didperformAction) {\r\n        didperformAction(response,status);\r\n      }\r\n    }\r\n  \r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      TweetAction(tweet.id, action.type, HandleBackendAction)\r\n  \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n","import { backendLookup } from '../lookup'\r\n\r\nexport function createTweets(newTweet, callback) {\r\n  backendLookup(\"POST\", \"/tweet/create/\", callback, { content: newTweet })\r\n}\r\n\r\nexport function TweetDetailView(TweetId, callback) {\r\n  backendLookup(\"GET\",`/tweet/${TweetId}/`,callback)\r\n}\r\n\r\nexport function loadTweets(username, callback) {\r\n  let endpoint=\"/tweet/\"\r\n  if (username) {\r\n    endpoint=`/tweet/?username=${username}`\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\nexport function TweetAction(tweetId, action, callback) {\r\n  const data = { id: tweetId, action: action }\r\n  backendLookup(\"POST\", \"/tweet/action/\", callback, data)\r\n}\r\n","import React, { useState } from 'react'\r\nimport { ActionBtn } from './buttons';\r\n\r\nexport function ParentTweet(props) {\r\n  const { tweet } = props;\r\n\r\n  return tweet.parent ?\r\n    <div className='row'>\r\n      <div className=\"col-11 mx-auto border rounded\">\r\n        <p className='mb-0 text-muted small'>Retweet</p>\r\n        <Tweet HideActions className={''} tweet={tweet.parent} />\r\n      </div>\r\n    </div> : null\r\n\r\n\r\n}\r\nexport function Tweet(props) {\r\n  const { tweet, didRetweet, HideActions } = props\r\n  const [actionTweet, setactionTweet] = useState(props.tweet ? props.tweet : null);\r\n  const className = props.className ? props.className : 'col-10 col-md-6'\r\n  const path = window.location.pathname\r\n  const match = path.match(/(?<tweetid>\\d+)/)\r\n  const urlTweetId = match ? match.groups.tweetid : -1\r\n  const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n\r\n  const handleLink = (event) => {\r\n    event.preventDefault()\r\n    window.location.href = `/${tweet.id}`\r\n  }\r\n\r\n  const handlePerformAction = (newActionTweet, status) => {\r\n    if (status == 200) {\r\n      setactionTweet(newActionTweet)\r\n    }\r\n    else if (status == 201) {\r\n      if (didRetweet) {\r\n        didRetweet(newActionTweet)\r\n      }\r\n    }\r\n  }\r\n\r\n  return <div className={className}>\r\n    <div>\r\n      <p>{tweet.id} - {tweet.content}</p>\r\n      <ParentTweet tweet={tweet} />\r\n    </div>\r\n    <div className='btn btn-group'>\r\n      {(actionTweet && HideActions !== true) && <React.Fragment>\r\n        <ActionBtn tweet={actionTweet} didperformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\r\n        <ActionBtn tweet={actionTweet} didperformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\r\n        <ActionBtn tweet={actionTweet} didperformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\r\n      </React.Fragment>}\r\n      {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n    </div>\r\n  </div>\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nimport { loadTweets } from './lookup'\r\nimport {Tweet} from './detail';\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, settweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([])\r\n    const [tweetsDidSet, settweetsDidSet] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit]);\r\n  \r\n    useEffect(() => {\r\n      if (tweetsDidSet === false) {\r\n        const myCallback = (response, status) => {\r\n          if (status === 200) {\r\n            settweetsInit(response)\r\n            settweetsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        console.log(props.username)\r\n        loadTweets(props.username,myCallback)\r\n      }\r\n    }, [tweetsInit, tweetsDidSet, settweetsDidSet,props.username])\r\n  \r\n    const HandleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      settweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n  \r\n    return tweets.map((item, index) => {\r\n      return <Tweet tweet={item} didRetweet={HandleDidRetweet} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }","import React from 'react'\r\n\r\nimport { createTweets } from './lookup'\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet}=props;\r\n    const handleBackendUpdate = (response, status) => {\r\n      if (status == 201) {\r\n        didTweet(response)\r\n      }\r\n      else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n  \r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      const newVal = textAreaRef.current.value\r\n      createTweets(newVal, handleBackendUpdate);\r\n      textAreaRef.current.value = \" \"\r\n    }\r\n    return <div className={props.className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} required={true} className=\"form-control\" name=\"tweet\">\r\n  \r\n        </textarea>\r\n        <button type=\"submit\" className=\"btn btn-primary mb-3 mt-3\"> Tweet </button>\r\n      </form>\r\n    </div>\r\n  }","import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport { TweetsList } from './list';\r\n\r\nimport { TweetCreate } from './create';\r\nimport { TweetDetailView } from './lookup'\r\nimport { Tweet } from './detail'\r\nexport function TweetComponent(props) {\r\n\r\n  const [newTweets, setnewTweets] = useState([]);\r\n  const canTweet = props.canTweet === \"false\" ? false : true\r\n  const HandlenewTweet = (newTweet) => {\r\n    let tempnewTweets = [...newTweets]\r\n    tempnewTweets.unshift(newTweet)\r\n    setnewTweets(tempnewTweets)\r\n  }\r\n\r\n\r\n  return <div className={props.className}>\r\n    {canTweet && <TweetCreate didTweet={HandlenewTweet} className={\"col-12 mb-3\"} />\r\n    }\r\n    <TweetsList newTweets={newTweets} {...props} />\r\n  </div>\r\n}\r\n\r\n\r\n\r\nexport function DetailComponent(props) {\r\n  const { tweetId } = props;\r\n  console.log(props)\r\n  const [lookup, setlookup] = useState(false);\r\n  const [tweet, settweet] = useState(null);\r\n\r\n  const HandleTweet = (response, status) => {\r\n    if (status == 200) {\r\n      settweet(response)\r\n    }\r\n    else {\r\n      alert(\"There was an error finding your tweet\")\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (lookup === false) {\r\n      TweetDetailView(tweetId, HandleTweet)\r\n      setlookup(true);\r\n    }\r\n  }, [tweetId, lookup, setlookup]);\r\n\r\n  return tweet===null ? null : <Tweet tweet={tweet} className={props.className}/>\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { DetailComponent, TweetComponent } from './tweets';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\n\nconst e=React.createElement\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(e(TweetComponent,tweetsEl.dataset), tweetsEl);\n}\nconst tweetDetailElements=document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElements.forEach(container=>{\n    ReactDOM.render(e(DetailComponent,container.dataset),container)\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}