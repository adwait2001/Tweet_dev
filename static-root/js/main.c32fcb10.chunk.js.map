{"version":3,"sources":["logo.svg","lookup/component.js","tweets/lookup.js","tweets/buttons.js","profiles/components.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/feed.js","tweets/component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","indexOf","onerror","e","send","loadTweets","username","nextUrl","replace","apiTweetFeed","undefined","ActionBtn","props","tweet","action","didperformAction","className","likes","actionDisplay","display","HandleBackendAction","console","log","type","onClick","event","preventDefault","tweetId","id","TweetAction","UserLink","children","UserDisplay","user","nameDisplay","includeFullname","first_name","last_name","Fragment","UserImage","ParentTweet","parent","Tweet","isRetweet","retweeter","HideActions","didRetweet","useState","actionTweet","setactionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","TweetsList","tweetsInit","settweetsInit","tweets","setTweets","setNextUrl","tweetsDidSet","settweetsDidSet","useEffect","final","newTweets","concat","next","results","alert","HandleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","onSubmit","newVal","current","value","ref","required","FeedList","TweetComponent","setnewTweets","canTweet","tempnewTweets","DetailComponent","lookup","setlookup","settweet","HandleTweet","App","src","logo","alt","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","tweetsEl","dataset","tweetFeedEl","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c32fcb10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    var cookies = document.cookie.split(';');\r\n    for (var i = 0; i < cookies.length; i++) {\r\n      var cookie = cookies[i].trim();\r\n      // Does this cookie string begin with the name we want?\r\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData\r\n  if (data) {\r\n    jsonData = JSON.stringify(data)\r\n  }\r\n  const xhr = new XMLHttpRequest()\r\n  const url = `http://localhost:8000/api${endpoint}`\r\n  xhr.responseType = \"json\"\r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url)\r\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\r\n  if (csrftoken) {\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n  xhr.onload = function () {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\") {\r\n        if (window.location.href.indexOf(\"login\") === -1) {\r\n          window.location.href = \"/login?showLoginRequired=true\"\r\n        }\r\n      }\r\n    }\r\n    callback(xhr.response, xhr.status)\r\n  }\r\n  xhr.onerror = function (e) {\r\n    callback({ \"message\": \"The request was an error\" }, 400)\r\n  }\r\n  xhr.send(jsonData)\r\n\r\n}\r\n\r\n\r\n","import { backendLookup } from '../lookup'\r\n\r\nexport function createTweets(newTweet, callback) {\r\n  backendLookup(\"POST\", \"/tweet/create/\", callback, { content: newTweet })\r\n}\r\n\r\nexport function TweetDetailView(TweetId, callback) {\r\n  backendLookup(\"GET\",`/tweet/${TweetId}/`,callback)\r\n}\r\n\r\nexport function loadTweets(username, callback ,nextUrl) {\r\n  let endpoint=\"/tweet/\"\r\n  if (username) {\r\n    endpoint=`/tweet/?username=${username}`\r\n  }\r\n  if (nextUrl) {\r\n    endpoint=nextUrl.replace(\"http://localhost:8000/api\",\"\")\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\nexport function TweetAction(tweetId, action, callback) {\r\n  const data = { id: tweetId, action: action }\r\n  backendLookup(\"POST\", \"/tweet/action/\", callback, data)\r\n}\r\n\r\nexport function apiTweetFeed(callback, nextUrl) {\r\n  let endpoint =  \"/tweet/feed\"\r\n  if (nextUrl !== null && nextUrl !== undefined) {\r\n      endpoint = nextUrl.replace(\"http://localhost:8000/api\", \"\")\r\n  }\r\n  backendLookup(\"GET\", endpoint, callback)\r\n}","\r\nimport React from 'react'\r\n\r\nimport { TweetAction } from './lookup'\r\n\r\nexport function ActionBtn(props) {\r\n    const { tweet, action ,didperformAction} = props\r\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\r\n    const likes = tweet.likes ? tweet.likes : 0\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n  \r\n    const HandleBackendAction = (response, status) => {\r\n      console.log(response, status)\r\n      if ((status == 200 || status==201 ) && didperformAction) {\r\n        didperformAction(response,status);\r\n      }\r\n    }\r\n  \r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      TweetAction(tweet.id, action.type, HandleBackendAction)\r\n  \r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n","import React from 'react'\r\n\r\nexport function UserLink(props){\r\n    const {username} = props\r\n    \r\n    const handleUserLink=(event)=>{\r\n        window.location.href=`/profiles/${username}`\r\n    }\r\n\r\n    return <span className='pointer' onClick={handleUserLink}> \r\n        {props.children}\r\n    </span>\r\n}\r\n\r\nexport  function UserDisplay(props){\r\n    const {user,includeFullname}=props\r\n    const nameDisplay = includeFullname === true ? `${user.first_name} ${user.last_name} ` : null\r\n    return <React.Fragment>\r\n    {nameDisplay}\r\n    <UserLink username={user.username}>@{user.username}</UserLink>\r\n    </React.Fragment>\r\n}\r\n\r\nexport function UserImage(props){\r\n    const {user} = props\r\n    return  <UserLink username={user.username}><span className='mx-1 px-3 py-2 rounded-circle bg-dark text-white'>\r\n    {user.username[0]}\r\n    </span></UserLink>\r\n}","import React, { useState } from 'react'\r\nimport { ActionBtn } from './buttons';\r\nimport {UserDisplay,UserImage,UserLink} from '../profiles'\r\n\r\nexport function ParentTweet(props) {\r\n  const { tweet } = props;\r\n  return tweet.parent ? <Tweet isRetweet retweeter={props.retweeter} HideActions className={' '} tweet={tweet.parent} /> : null\r\n}\r\nexport function Tweet(props) {\r\n  const { tweet, didRetweet, HideActions,isRetweet,retweeter } = props\r\n  const [actionTweet, setactionTweet] = useState(props.tweet ? props.tweet : null);\r\n  let className = props.className ? props.className : 'col-10 col-md-6'\r\n  className = isRetweet === true ? `${className} p-2 border rounded` : className\r\n  const path = window.location.pathname\r\n  const match = path.match(/(?<tweetid>\\d+)/)\r\n  const urlTweetId = match ? match.groups.tweetid : -1\r\n  const isDetail = `${tweet.id}` === `${urlTweetId}`\r\n\r\n  const handleLink = (event) => {\r\n    event.preventDefault()\r\n    window.location.href = `/${tweet.id}`\r\n  }\r\n\r\n  const handlePerformAction = (newActionTweet, status) => {\r\n    if (status == 200) {\r\n      setactionTweet(newActionTweet)\r\n    }\r\n    else if (status == 201) {\r\n      if (didRetweet) {\r\n        didRetweet(newActionTweet)\r\n      }\r\n    }\r\n  }\r\n\r\n  return <div className={className}>\r\n    {\r\n      isRetweet === true && <div className='mb-2'>\r\n          <span className='small text-muted'>Retweet via <UserDisplay user={retweeter} /></span>\r\n    </div>\r\n    }\r\n    <div className='d-flex'>\r\n      <div className=''>\r\n      <UserImage user={tweet.user} />\r\n      </div>\r\n      <div className='col-11'>\r\n        <div>\r\n          <p>\r\n            <UserDisplay includeFullname user={tweet.user}/>\r\n          </p>\r\n          <p>{tweet.content}</p>\r\n\r\n          <ParentTweet tweet={tweet} retweeter={tweet.user}/>\r\n        </div>\r\n        <div className='btn btn-group px-0'>\r\n          {(actionTweet && HideActions !== true) && <React.Fragment>\r\n            <ActionBtn tweet={actionTweet} didperformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\r\n            <ActionBtn tweet={actionTweet} didperformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\r\n            <ActionBtn tweet={actionTweet} didperformAction={handlePerformAction} action={{ type: \"retweet\", display: \"Retweet\" }} />\r\n          </React.Fragment>}\r\n          {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nimport { loadTweets } from './lookup'\r\nimport {Tweet} from './detail';\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, settweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([])\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [tweetsDidSet, settweetsDidSet] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit]);\r\n  \r\n    useEffect(() => {\r\n      if (tweetsDidSet === false) {\r\n        const myCallback = (response, status) => {\r\n          if (status === 200) {\r\n            setNextUrl(response.next)\r\n            settweetsInit(response.results)\r\n            settweetsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        console.log(props.username)\r\n        loadTweets(props.username,myCallback)\r\n      }\r\n    }, [tweetsInit, tweetsDidSet, settweetsDidSet,props.username])\r\n  \r\n    const HandleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      settweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n  \r\n    const handleLoadNext = (event) => {\r\n      event.preventDefault()\r\n      if(nextUrl != null)\r\n      {\r\n        const handleLoadNextResponse=(response,status)=>{\r\n          if(status==200)\r\n          {\r\n            setNextUrl(response.next)\r\n            const newTweets=[...tweets].concat(response.results)\r\n            settweetsInit(newTweets)\r\n            setTweets(newTweets)\r\n          }else{\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        loadTweets(props.username, handleLoadNextResponse, nextUrl)\r\n      }\r\n    }\r\n\r\n    return <React.Fragment> {tweets.map((item, index) => {\r\n      return <Tweet tweet={item} \r\n       didRetweet={HandleDidRetweet} \r\n       className='my-5 py-5 border bg-white text-dark' \r\n       key={`${index}-{item.id}`} />\r\n    })}\r\n      {nextUrl!==null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load Next</button>}\r\n      </React.Fragment>\r\n  \r\n  }","import React from 'react'\r\n\r\nimport { createTweets } from './lookup'\r\n\r\n\r\nexport function TweetCreate(props) {\r\n    const textAreaRef = React.createRef()\r\n    const {didTweet}=props;\r\n    const handleBackendUpdate = (response, status) => {\r\n      if (status == 201) {\r\n        didTweet(response)\r\n      }\r\n      else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n  \r\n    const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      const newVal = textAreaRef.current.value\r\n      createTweets(newVal, handleBackendUpdate);\r\n      textAreaRef.current.value = \" \"\r\n    }\r\n    return <div className={props.className}>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea ref={textAreaRef} required={true} className=\"form-control\" name=\"tweet\">\r\n  \r\n        </textarea>\r\n        <button type=\"submit\" className=\"btn btn-primary mb-3 mt-3\"> Tweet </button>\r\n      </form>\r\n    </div>\r\n  }","import React, { useEffect, useState } from 'react'\r\n\r\nimport { apiTweetFeed, loadTweets } from './lookup'\r\nimport {Tweet} from './detail';\r\n\r\nexport function FeedList(props) {\r\n    const [tweetsInit, settweetsInit] = useState([]);\r\n    const [tweets, setTweets] = useState([])\r\n    const [nextUrl, setNextUrl] = useState(null)\r\n    const [tweetsDidSet, settweetsDidSet] = useState(false);\r\n  \r\n    useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit]);\r\n  \r\n    useEffect(() => {\r\n      if (tweetsDidSet === false) {\r\n        const myCallback = (response, status) => {\r\n          if (status === 200) {\r\n            setNextUrl(response.next)\r\n            settweetsInit(response.results)\r\n            settweetsDidSet(true)\r\n          } else {\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiTweetFeed(myCallback)\r\n      }\r\n    }, [tweetsInit, tweetsDidSet, settweetsDidSet,props.username])\r\n  \r\n    const HandleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      settweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n  \r\n    const handleLoadNext = (event) => {\r\n      event.preventDefault()\r\n      if(nextUrl != null)\r\n      {\r\n        const handleLoadNextResponse=(response,status)=>{\r\n          if(status==200)\r\n          {\r\n            setNextUrl(response.next)\r\n            const newTweets=[...tweets].concat(response.results)\r\n            settweetsInit(newTweets)\r\n            setTweets(newTweets)\r\n          }else{\r\n            alert(\"There was an error\")\r\n          }\r\n        }\r\n        apiTweetFeed(handleLoadNextResponse, nextUrl)\r\n      }\r\n    }\r\n\r\n    return <React.Fragment> {tweets.map((item, index) => {\r\n      return <Tweet tweet={item} \r\n       didRetweet={HandleDidRetweet} \r\n       className='my-5 py-5 border bg-white text-dark' \r\n       key={`${index}-{item.id}`} />\r\n    })}\r\n      {nextUrl!==null && <button onClick={handleLoadNext} className='btn btn-outline-primary'>Load Next</button>}\r\n      </React.Fragment>\r\n  \r\n  }","import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport { TweetsList } from './list';\r\n\r\nimport { TweetCreate } from './create';\r\nimport { TweetDetailView } from './lookup'\r\nimport { Tweet } from './detail'\r\nimport { FeedList } from './feed';\r\nexport function TweetComponent(props) {\r\n\r\n  const [newTweets, setnewTweets] = useState([]);\r\n  const canTweet = props.canTweet === \"false\" ? false : true\r\n  const HandlenewTweet = (newTweet) => {\r\n    let tempnewTweets = [...newTweets]\r\n    tempnewTweets.unshift(newTweet)\r\n    setnewTweets(tempnewTweets)\r\n  }\r\n\r\n\r\n  return <div className={props.className}>\r\n    {canTweet && <TweetCreate didTweet={HandlenewTweet} className={\"col-12 mb-3\"} />\r\n    }\r\n    <TweetsList newTweets={newTweets} {...props} />\r\n  </div>\r\n}\r\n\r\nexport function FeedComponent(props) {\r\n\r\n  const [newTweets, setnewTweets] = useState([]);\r\n  const canTweet = props.canTweet === \"false\" ? false : true\r\n  const HandlenewTweet = (newTweet) => {\r\n    let tempnewTweets = [...newTweets]\r\n    tempnewTweets.unshift(newTweet)\r\n    setnewTweets(tempnewTweets)\r\n  }\r\n\r\n\r\n  return <div className={props.className}>\r\n    {canTweet && <TweetCreate didTweet={HandlenewTweet} className={\"col-12 mb-3\"} />\r\n    }\r\n    <FeedList newTweets={newTweets} {...props} />\r\n  </div>\r\n}\r\n\r\n\r\nexport function DetailComponent(props) {\r\n  const { tweetId } = props;\r\n  console.log(props)\r\n  const [lookup, setlookup] = useState(false);\r\n  const [tweet, settweet] = useState(null);\r\n\r\n  const HandleTweet = (response, status) => {\r\n    if (status == 200) {\r\n      settweet(response)\r\n    }\r\n    else {\r\n      alert(\"There was an error finding your tweet\")\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (lookup === false) {\r\n      TweetDetailView(tweetId, HandleTweet)\r\n      setlookup(true);\r\n    }\r\n  }, [tweetId, lookup, setlookup]);\r\n\r\n  return tweet===null ? null : <Tweet tweet={tweet} className={props.className}/>\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetComponent} from './tweets'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <TweetComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { DetailComponent, FeedComponent, TweetComponent } from './tweets';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\n\nconst e=React.createElement\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n    ReactDOM.render(e(TweetComponent,tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetFeedEl  = document.getElementById(\"tweetme-2-feed\")\nif (tweetFeedEl) {\n    ReactDOM.render(e(FeedComponent,tweetFeedEl.dataset), tweetFeedEl);\n}\n\nconst tweetDetailElements=document.querySelectorAll(\".tweetme-detail\")\n\ntweetDetailElements.forEach(container=>{\n    ReactDOM.render(e(DetailComponent,container.dataset),container)\n})\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}